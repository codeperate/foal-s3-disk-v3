"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UseSessions = void 0;
const core_1 = require("../core");
const constants_1 = require("./constants");
const create_session_1 = require("./create-session");
const read_session_1 = require("./read-session");
const remove_session_cookie_1 = require("./remove-session-cookie");
const session_store_1 = require("./session-store");
const set_session_cookie_1 = require("./set-session-cookie");
function UseSessions(options = {}) {
    function badRequestOrRedirect(description) {
        if (options.redirectTo) {
            return new core_1.HttpResponseRedirect(options.redirectTo);
        }
        return new core_1.HttpResponseBadRequest({ code: 'invalid_request', description });
    }
    function unauthorizedOrRedirect(description) {
        if (options.redirectTo) {
            return new core_1.HttpResponseRedirect(options.redirectTo);
        }
        return new core_1.HttpResponseUnauthorized({ code: 'invalid_token', description })
            .setHeader('WWW-Authenticate', `error="invalid_token", error_description="${description}"`);
    }
    async function hook(ctx, services) {
        var _a, _b;
        const ConcreteSessionStore = options.store || session_store_1.SessionStore;
        const store = services.get(ConcreteSessionStore);
        async function postFunction(response) {
            if (!(ctx.session) || core_1.isHttpResponseInternalServerError(response)) {
                return;
            }
            if (ctx.session.isDestroyed) {
                if (options.cookie) {
                    remove_session_cookie_1.removeSessionCookie(response, !!options.userCookie);
                }
                return;
            }
            await ctx.session.commit();
            if (options.cookie) {
                const userCookie = options.userCookie ? await options.userCookie(ctx, services) : undefined;
                set_session_cookie_1.setSessionCookie(response, ctx.session, userCookie);
            }
        }
        /* Validate the request */
        let sessionID;
        if (options.cookie) {
            const cookieName = core_1.Config.get('settings.session.cookie.name', 'string', constants_1.SESSION_DEFAULT_COOKIE_NAME);
            const content = ctx.request.cookies[cookieName];
            if (!content) {
                if (!options.required) {
                    if ((_a = options.create) !== null && _a !== void 0 ? _a : true) {
                        ctx.session = await create_session_1.createSession(store);
                    }
                    return postFunction;
                }
                return badRequestOrRedirect('Session cookie not found.');
            }
            sessionID = content;
        }
        else {
            const authorizationHeader = ctx.request.get('Authorization') || '';
            if (!authorizationHeader) {
                if (!options.required) {
                    if (options.create) {
                        ctx.session = await create_session_1.createSession(store);
                    }
                    return postFunction;
                }
                return badRequestOrRedirect('Authorization header not found.');
            }
            const content = authorizationHeader.split('Bearer ')[1];
            if (!content) {
                return badRequestOrRedirect('Expected a bearer token. Scheme is Authorization: Bearer <token>.');
            }
            sessionID = content;
        }
        /* Verify the session ID */
        const session = await read_session_1.readSession(store, sessionID);
        if (!session) {
            const response = unauthorizedOrRedirect('token invalid or expired');
            if (options.cookie) {
                remove_session_cookie_1.removeSessionCookie(response, !!options.userCookie);
            }
            return response;
        }
        /* Verify CSRF token */
        if (options.cookie &&
            ((_b = options.csrf) !== null && _b !== void 0 ? _b : core_1.Config.get('settings.session.csrf.enabled', 'boolean', false)) &&
            !['GET', 'HEAD', 'OPTIONS'].includes(ctx.request.method)) {
            const expectedCsrftoken = session.get('csrfToken');
            if (!expectedCsrftoken) {
                throw new Error('Unexpected error: the session content does not have a "csrfToken" field. '
                    + 'Are you sure you created the session with "createSession"?');
            }
            const actualCsrfToken = ctx.request.body._csrf ||
                ctx.request.get('X-CSRF-Token') ||
                ctx.request.get('X-XSRF-Token');
            if (actualCsrfToken !== expectedCsrftoken) {
                return new core_1.HttpResponseForbidden('CSRF token missing or incorrect.');
            }
        }
        /* Set ctx.session */
        ctx.session = session;
        /* Set ctx.user */
        if (session.userId !== null && options.user) {
            ctx.user = await options.user(session.userId, services);
            if (!ctx.user) {
                await session.destroy();
                const response = unauthorizedOrRedirect('The token does not match any user.');
                if (options.cookie) {
                    remove_session_cookie_1.removeSessionCookie(response, !!options.userCookie);
                }
                return response;
            }
        }
        return postFunction;
    }
    const openapi = [
        options.required ?
            core_1.ApiResponse(401, { description: 'Auth token is missing or invalid.' }) :
            core_1.ApiResponse(401, { description: 'Auth token is invalid.' })
    ];
    if (options.cookie) {
        const securityScheme = {
            in: 'cookie',
            name: core_1.Config.get('settings.session.cookie.name', 'string', constants_1.SESSION_DEFAULT_COOKIE_NAME),
            type: 'apiKey',
        };
        openapi.push(core_1.ApiDefineSecurityScheme('cookieAuth', securityScheme));
        if (options.required) {
            openapi.push(core_1.ApiSecurityRequirement({ cookieAuth: [] }));
        }
        if (core_1.Config.get('settings.session.csrf.enabled', 'boolean', false)) {
            openapi.push(core_1.ApiResponse(403, { description: 'CSRF token is missing or incorrect.' }));
        }
    }
    else {
        const securityScheme = {
            scheme: 'bearer',
            type: 'http',
        };
        openapi.push(core_1.ApiDefineSecurityScheme('bearerAuth', securityScheme));
        if (options.required) {
            openapi.push(core_1.ApiSecurityRequirement({ bearerAuth: [] }));
        }
    }
    return core_1.Hook(hook, openapi, { openapi: options.openapi });
}
exports.UseSessions = UseSessions;
