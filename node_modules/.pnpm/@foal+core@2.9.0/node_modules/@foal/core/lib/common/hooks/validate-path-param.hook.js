"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidatePathParam = void 0;
// FoalTS
const core_1 = require("../../core");
const utils_1 = require("../utils");
const is_function_util_1 = require("./is-function.util");
/**
 * Hook - Validate a specific path parameter against an AJV schema.
 *
 * @export
 * @param {string} name - Path parameter name.
 * @param {(object | ((controller: any) => object))} schema - Schema used to
 * validate the path parameter.
 * @param {{ openapi?: boolean }} [options={}] - Options.
 * @param {boolean} [options.openapi] - Add OpenApi metadata.
 * @returns {HookDecorator} The hook.
 */
function ValidatePathParam(name, schema, options = {}) {
    let validateSchema;
    function validate(ctx, services) {
        if (!validateSchema) {
            const ajvSchema = is_function_util_1.isFunction(schema) ? schema(this) : schema;
            const components = services.get(core_1.OpenApi).getComponents(this);
            validateSchema = utils_1.getAjvInstance().compile({
                components,
                properties: {
                    [name]: ajvSchema
                },
                required: [name],
                type: 'object',
            });
        }
        if (!validateSchema(ctx.request.params)) {
            return new core_1.HttpResponseBadRequest({ pathParams: validateSchema.errors });
        }
    }
    const openapi = [
        core_1.ApiParameter((c) => ({
            in: 'path',
            name,
            required: true,
            schema: is_function_util_1.isFunction(schema) ? schema(c) : schema,
        })),
        core_1.ApiResponse(400, { description: 'Bad request.' })
    ];
    return core_1.Hook(validate, openapi, options);
}
exports.ValidatePathParam = ValidatePathParam;
