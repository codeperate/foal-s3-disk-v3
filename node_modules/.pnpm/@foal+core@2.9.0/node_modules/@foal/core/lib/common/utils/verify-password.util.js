"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyPassword = void 0;
const assert_1 = require("assert");
const crypto_1 = require("crypto");
const util_1 = require("util");
/**
 * Compare a plain text password and a hash to see if they match.
 *
 * @export
 * @param {string} plainTextPassword - The password in clear text.
 * @param {string} passwordHash - The password hash generated by the `hashPassword` function.
 * @returns {Promise<boolean>} True if the hash and the password match. False otherwise.
 */
async function verifyPassword(plainTextPassword, passwordHash) {
    const [algorithm, iterations, salt, derivedKey] = passwordHash.split('$');
    assert_1.strictEqual(algorithm, 'pbkdf2_sha256', 'Invalid algorithm.');
    assert_1.strictEqual(typeof iterations, 'string', 'Invalid password format.');
    assert_1.strictEqual(typeof salt, 'string', 'Invalid password format.');
    assert_1.strictEqual(typeof derivedKey, 'string', 'Invalid password format.');
    assert_1.strictEqual(isNaN(parseInt(iterations, 10)), false, 'Invalid password format.');
    const saltBuffer = Buffer.from(salt, 'base64');
    const derivedKeyBuffer = Buffer.from(derivedKey, 'base64');
    const digest = 'sha256'; // TODO: depends on the algorthim var
    const password = await util_1.promisify(crypto_1.pbkdf2)(plainTextPassword, saltBuffer, parseInt(iterations, 10), derivedKeyBuffer.length, digest);
    return crypto_1.timingSafeEqual(password, derivedKeyBuffer);
}
exports.verifyPassword = verifyPassword;
